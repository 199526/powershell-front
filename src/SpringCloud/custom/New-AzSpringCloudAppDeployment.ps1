
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a new Deployment or update an exiting Deployment.
.Description
Create a new Deployment or update an exiting Deployment.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Models.Api20220401.IDeploymentResource
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

SOURCE <IUserSourceInfo>: Uploaded source information of the deployment.
  Type <String>: Type of the source uploaded
  [Version <String>]: Version of the source
.Link
https://docs.microsoft.com/powershell/module/az.springcloud/new-azspringcloudappdeployment
#>
function New-AzSpringCloudAppDeployment {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Models.Api20220401.IDeploymentResource])]
[CmdletBinding(DefaultParameterSetName='AppDeploymentForJar', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Path')]
    [System.String]
    # The name of the App resource.
    ${AppName},

    [Parameter(Mandatory)]
    [Alias('DeploymentName')]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Path')]
    [System.String]
    # The name of the Deployment resource.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Path')]
    [System.String]
    # The name of the resource group that contains the resource.
    # You can obtain this value from the Azure Resource Manager API or the portal.
    ${ResourceGroupName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Path')]
    [System.String]
    # The name of the Service resource.
    ${ServiceName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Gets subscription ID which uniquely identify the Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates whether the Deployment is active
    ${Active},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Models.Api20220401.IDeploymentSettingsAddonConfigs]))]
    [System.Collections.Hashtable]
    # Collection of addons
    ${AddonConfig},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Models.Api20220401.IDeploymentSettingsEnvironmentVariables]))]
    [System.Collections.Hashtable]
    # Collection of environment variables
    ${EnvironmentVariable},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Body')]
    [System.String]
    # Required CPU.
    # 1 core can be represented by 1 or 1000m.
    # This should be 500m or 1 for Basic tier, and {500m, 1, 2, 3, 4} for Standard tier.
    ${ResourceRequestCpu},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Body')]
    [System.String]
    # Required memory.
    # 1 GB can be represented by 1Gi or 1024Mi.
    # This should be {512Mi, 1Gi, 2Gi} for Basic tier, and {512Mi, 1Gi, 2Gi, ..., 8Gi} for Standard tier.
    ${ResourceRequestMemory},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Body')]
    [System.Int32]
    # Current capacity of the target resource
    ${SkuCapacity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Body')]
    [System.String]
    # Name of the Sku
    ${SkuName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Body')]
    [System.String]
    # Tier of the Sku
    ${SkuTier},

    [Parameter(Mandatory, HelpMessage="The source code path of the Jar or Zip according to the SourceType parameter.")]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Path')]
    [System.String]
    ${SourceFilePath},

    # [Parameter()]
    # [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Body')]
    # [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Models.Api20220401.IUserSourceInfo]
    # # Uploaded source information of the deployment.
    # # To construct, see NOTES section for SOURCE properties and create a hash table.
    # ${Source},

    [Parameter(Mandatory, HelpMessage="Type of the source uploaded.")]
    [ValidateSet('Jar', 'NetCoreZip', 'Source')]
    [System.String]
    $SourceType,

    [Parameter(HelpMessage="Runtime version of the file.")]
    [string]
    $RuntimeVersion,

    [Parameter(HelpMessage="Version of the source.")]
    [string]
    $Version,

    [Parameter(HelpMessage="JVM parameter.", ParameterSetName="AppDeploymentForJar")]
    [string]
    $JvmOption,

    [Parameter(HelpMessage="The path to the .NET executable relative to zip root.", ParameterSetName="AppDeploymentForNetCore")]
    [string]
    $NetCoreMainEntryPath,

    [Parameter(HelpMessage="Selector for the artifact to be used for the deployment for multi-module projects. This should be
    the relative path to the target module/project.", ParameterSetName="AppDeploymentForSource")]
    [string]
    $ArtifactSelector,

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The credentials, account, tenant, and subscription used for communication with Azure.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)
    process {
        $DeployPSBoundParameters = @{}
        if ($PSBoundParameters.ContainsKey('HttpPipelineAppend')) {
            $DeployPSBoundParameters['HttpPipelineAppend'] = $HttpPipelineAppend
        }
        if ($PSBoundParameters.ContainsKey('HttpPipelinePrepend')) {
            $DeployPSBoundParameters['HttpPipelinePrepend'] = $HttpPipelinePrepend
        }
        $DeployPSBoundParameters['SubscriptionId'] = $SubscriptionId

        Write-Host '[1/3] Requesting for upload URL' -ForegroundColor Yellow
        $UploadInfo = Get-AzSpringCloudAppResourceUploadUrl -ResourceGroupName $ResourceGroupName -serviceName $ServiceName -Name $AppName @DeployPSBoundParameters
        $UploadUrl = $UploadInfo.UploadUrl
        $Uri = [System.Uri]::New($UploadUrl.Split('?')[0])
        $SasToken = $UploadUrl.Split('?')[-1]
        $StorageCredentials = [Microsoft.WindowsAzure.Storage.Auth.StorageCredentials]::New($SasToken)
        $CloudFile = [Microsoft.WindowsAzure.Storage.File.CloudFile]::New($Uri, $StorageCredentials)
        
        Write-Host '[2/3] Uploading package to blob' -ForegroundColor Yellow
        $UploadTask = $CloudFile.UploadFromFileAsync($SourceFilePath)
        try {
            $null = $UploadTask.GetAwaiter().GetResult()
        }
        catch {
            Write-Error $_.Exception
            return
        }
        Write-Host "[3/3] Create deployment in app $Name (this operation can take a while to complete)" -ForegroundColor Yellow
        $source = [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Models.Api20220401.UserSourceInfo]::New()
        if ($SourceType -eq 'Jar')
        {
            $Object = [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Models.Api20220401.JarUploadedUserSourceInfo]::New()
            $Object.Type = 'Jar'
            $Object.RelativePath = $UploadInfo.RelativePath
            if ($PSBoundParameters.ContainsKey('JvmOption')) {
                $Object.JvmOption = $JvmOption
            }
            if ($PSBoundParameters.ContainsKey('RuntimeVersion')) {
                $Object.RuntimeVersion = $RuntimeVersion
            }
            if ($PSBoundParameters.ContainsKey('Version')) {
                $Object.Version = $Version
            }
            
            $source = $Object
        }

        if ($SourceType -eq 'NetCoreZip')
        {
            $Object = [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Models.Api20220401.NetCoreZipUploadedUserSourceInfo]::New()
            $Object.Type = 'NetCoreZip'
            $Object.RelativePath = $UploadInfo.RelativePath
            if ($PSBoundParameters.ContainsKey('NetCoreMainEntryPath')) {
                $Object.NetCoreMainEntryPath = $NetCoreMainEntryPath
            }
            if ($PSBoundParameters.ContainsKey('RuntimeVersion')) {
                $Object.RuntimeVersion = $RuntimeVersion
            }
            if ($PSBoundParameters.ContainsKey('Version')) {
                $Object.Version = $Version
            }
            $source = $Object
        }
        
        if ($SourceType -eq 'Source')
        {
            $Object = [Microsoft.Azure.PowerShell.Cmdlets.SpringCloud.Models.Api20220401.SourceUploadedUserSourceInfo]::New()
            $Object.Type = 'Source'
            $Object.RelativePath = $UploadInfo.RelativePath
            if ($PSBoundParameters.ContainsKey('ArtifactSelector')) {
                $Object.ArtifactSelector = $ArtifactSelector
            }
            if ($PSBoundParameters.ContainsKey('RuntimeVersion')) {
                $Object.RuntimeVersion = $RuntimeVersion
            }
            if ($PSBoundParameters.ContainsKey('Version')) {
                $Object.Version = $Version
            }
            $source = $Object
        }
        $null = $PSBoundParameters.Remove('JvmOption')
        $null = $PSBoundParameters.Remove('RuntimeVersion')
        $null = $PSBoundParameters.Remove('Version')
        $null = $PSBoundParameters.Remove('NetCoreMainEntryPath')
        $null = $PSBoundParameters.Remove('ArtifactSelector')
        $null = $PSBoundParameters.Remove('SourceFilePath')
        $null = $PSBoundParameters.Remove('SourceType')
        
        $PSBoundParameters.TryAdd('Source', $source)
        Az.SpringCloud.internal\New-AzSpringCloudAppDeployment @PSBoundParameters
    }
}
